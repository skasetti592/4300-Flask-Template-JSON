# -*- coding: utf-8 -*-
"""FOODIE$_SVD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12ZruINzWO5dIThhLKLXwt9mJLyd32Y6p
"""

# OLD - same imports as before
import pandas as pd
import numpy as np
from numpy import linalg as LA
from sklearn.feature_extraction.text import TfidfVectorizer
import math
import re


def svd_results(df, query):
  # OLD - creating tf-idf matrix
  reviews = df['comments'].tolist()
  tfidf_vectorizer = TfidfVectorizer()
  tfidf_matrix = tfidf_vectorizer.fit_transform(reviews).toarray()

  # NEW - imports you need to add to the top
  from sklearn.preprocessing import normalize
  from scipy.sparse.linalg import svds

  # NEW
  u, s, v_trans = svds(tfidf_matrix, k=100)

  # NEW - most of the data lives in 10 dimensions but used 40 dimensions to be safe
  docs_compressed, s, words_compressed = svds(tfidf_matrix, k=40)

  # NEW
  docs_compressed_normed = normalize(docs_compressed)

  # NEW - updated cossim code
  def closest_projects(project_index_in, project_repr_in, k = 2433): # changed k to be the entire dataset
      sims = project_repr_in.dot(project_repr_in[project_index_in,:])
      asort = np.argsort(-sims)[:k+1]
      return [[reviews[i],sims[i], i] for i in asort[1:]]

  # NEW - parameters: the query, cuisine match, state, morning/evening, if they do not like a certain cuisine
  location = 'NJ' # example

  # OLD - from cossim code
  types = set()
  for entry in df["type"]:
    temp = re.findall(r'[a-z]+', entry.lower())
    for val in temp:
      types.add(val)

  # OLD - from cossim code
  qtokens = re.findall(r'[a-z]+', query.lower())
  qtokens = set(qtokens)
  qtypes = set()
  for t in qtokens:
    if t in types:
      qtypes.add(t)

  # NEW - extra filtering for qtypes for nonsense words
  if 'food' in qtypes:
      qtypes.remove('food')

  if len(qtypes) < 1:
    print('oh no')

  # NEW - actual svd code
  print("INPUT PROJECT: " + query)
  print("CLOSEST PROJECTS:")
  print("Using SVD:")

  results = set()

  if len(qtypes) < 1:
    for title, score, i in closest_projects(0, docs_compressed_normed):
      #if df.loc[i, 'State Abbreviation'] == location: # parameter
          #if df.loc[i, 'Evening'] == 1: # parameter - change these based on whether it is morning or evening, right now i put for evening
      temp = df.loc[i, 'name']
      results.add(temp)
  
  else:
    for title, score, i in closest_projects(0, docs_compressed_normed):
      #if df.loc[i, 'State Abbreviation'] == location: # parameter
        #if df.loc[i, 'Evening'] == 1: # parameter - change these based on whether it is morning or evening, right now i put for evening
      entry = df.loc[i, 'type']
      temp = re.findall(r'[a-z]+', entry.lower())
      found = False
      for t in temp:
        if t in qtypes:
          found = True

      print(found)
      print(temp)
      if found:
        temp = df.loc[i, 'name']
        results.add(temp)

  return results